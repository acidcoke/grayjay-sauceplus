import { md5 } from "js-md5";
import fetch from "sync-fetch";
function init() {
    const local_plugin = {
        config: { id: "c70eec9a-2cf4-46a3-8ab3-e1537ea1a2a3" },
        settings: {}
    };
    // @ts-expect-error hack to inject constant
    globalThis.plugin = local_plugin;
    const is_testing = false;
    // @ts-expect-error hack to inject constant
    globalThis.IS_TESTING = is_testing;
    const local_source = {};
    // @ts-expect-error hack to inject constant
    globalThis.source = local_source;
    globalThis.log = console.log;
    const type = {
        Source: {
            Dash: "DASH",
            HLS: "HLS",
            STATIC: "Static"
        },
        Feed: {
            Videos: "VIDEOS",
            Live: "LIVE",
            Mixed: "MIXED",
            Shorts: "SHORTS",
        },
        Order: {
            Chronological: "Latest releases",
            Views: "Most played",
            Favorites: "Most favorited",
            Oldest: "Oldest"
        },
        Date: {
            LastHour: "LAST_HOUR",
            Today: "TODAY",
            LastWeek: "LAST_WEEK",
            LastMonth: "LAST_MONTH",
            LastYear: "LAST_YEAR"
        },
        Duration: {
            Short: "SHORT",
            Medium: "MEDIUM",
            Long: "LONG"
        },
        Text: {
            RAW: 0,
            HTML: 1,
            MARKUP: 2
        },
        Chapter: {
            NORMAL: 0,
            SKIPPABLE: 5,
            SKIP: 6,
            SKIPONCE: 7
        }
    };
    // @ts-expect-error hack to inject constant
    globalThis.Type = type;
    const language = {
        UNKNOWN: "Unknown",
        ARABIC: "ar",
        SPANISH: "es",
        FRENCH: "fr",
        HINDI: "hi",
        INDONESIAN: "id",
        KOREAN: "ko",
        PORTUGUESE: "pt",
        // PORTBRAZIL: "pt",
        RUSSIAN: "ru",
        THAI: "th",
        TURKISH: "tr",
        VIETNAMESE: "vi",
        ENGLISH: "en",
        GERMAN: "de"
    };
    // @ts-expect-error hack to inject constant
    globalThis.Language = language;
    function LOCAL_HTTP_GET(url, headers, use_auth_client, use_byte_response) {
        if (use_byte_response) {
            throw new ScriptException("use_byte_response is unsupported during testing");
        }
        return http.request("GET", url, headers, use_auth_client);
    }
    function LOCAL_HTTP_POST(url, body, headers, use_auth_client, use_byte_response) {
        if (use_byte_response) {
            throw new ScriptException("use_byte_response is unsupported during testing");
        }
        return http.requestWithBody("POST", url, body, headers, use_auth_client);
    }
    const local_http = {
        GET: LOCAL_HTTP_GET,
        POST: LOCAL_HTTP_POST,
        request(method, url, headers, use_auth_client) {
            log(use_auth_client);
            const options = {
                method,
                headers
            };
            const res = fetch(url, options);
            const body = res.text();
            const code = res.status;
            if (code !== 404 && code !== 200 && code !== 403) {
                throw new ScriptException(`unimplemented code: ${code}`);
            }
            return { body, code, headers: { error: ["headers not implemented"] }, url, isOk: res.ok };
        },
        requestWithBody(method, url, body, headers, use_auth_client) {
            log(use_auth_client);
            const options = {
                method,
                body,
                headers
            };
            const res = fetch(url, options);
            const res_body = res.text();
            const code = res.status;
            if (code !== 404 && code !== 200 && code !== 403) {
                throw new ScriptException(`unimplemented code: ${code}`);
            }
            return { body: res_body, code, headers: { error: ["headers not implemented"] }, url, isOk: res.ok };
        },
        batch() {
            return new Batcher();
        },
        socket(url, headers, use_auth_client) {
            log("socket not implemented");
            log(url);
            log(headers);
            log(use_auth_client);
            return {
                isOpen: false,
                send(msg) {
                    log("socket not implemented");
                    log(msg);
                },
                connect(socketObj) {
                    log("socket not implemented");
                    log(socketObj);
                },
                close() {
                    log("socket not implemented");
                }
            };
        },
        newClient(with_auth) {
            log(with_auth);
            throw new Error("not implemented");
        },
        getDefaultClient(with_auth) {
            log(with_auth);
            throw new Error("not implemented");
        }
    };
    // @ts-expect-error hack to inject constant
    globalThis.http = local_http;
    const local_utility = {
        toBase64(byte_array) {
            return btoa(bytes_to_string(byte_array));
        },
        fromBase64(encoded_string) {
            log(encoded_string);
            throw new Error("not implemented");
        },
        md5String(str) {
            return md5(str);
        }
    };
    // @ts-expect-error hack to inject constant
    globalThis.utility = local_utility;
    const local_dom_parser = {
        parseFromString(html) {
            log(html);
            throw new Error("not implemented");
        }
    };
    // @ts-expect-error hack to inject constant
    globalThis.domParser = local_dom_parser;
    function bytes_to_string(bytes) {
        let result = "";
        for (const byte of bytes) {
            result = result + String.fromCharCode(byte);
        }
        return result;
    }
    class Batcher {
        requests = [];
        GET(url, headers, use_auth_client) {
            this.requests.push({ method: "GET", url, headers, use_auth_client });
            return this;
        }
        POST(url, body, headers, use_auth_client) {
            this.requests.push({ method: "POST", url, body, headers, use_auth_client });
            return this;
        }
        execute() {
            return this.requests.map((request) => {
                if ("body" in request) {
                    return http.requestWithBody(request.method, request.url, request.body, request.headers, request.use_auth_client);
                }
                return http.request(request.method, request.url, request.headers, request.use_auth_client);
            });
        }
    }
    class ContentPager {
        plugin_type;
        results;
        hasMore;
        constructor(results, hasMore) {
            this.plugin_type = "ContentPager";
            this.results = results;
            this.hasMore = hasMore;
        }
        hasMorePagers() { return this.hasMore; }
        nextPage() {
            this.hasMore = false;
            this.results = [];
            return this;
        }
    }
    // @ts-expect-error hack to inject constant
    globalThis.ContentPager = ContentPager;
    class VideoPager {
        plugin_type;
        results;
        hasMore;
        constructor(results, hasMore) {
            this.plugin_type = "VideoPager";
            this.results = results;
            this.hasMore = hasMore;
        }
        hasMorePagers() { return this.hasMore; }
        nextPage() {
            this.hasMore = false;
            this.results = [];
            return this;
        }
    }
    // @ts-expect-error hack to inject constant
    globalThis.VideoPager = VideoPager;
    class ChannelPager {
        plugin_type;
        results;
        hasMore;
        constructor(results, hasMore) {
            this.plugin_type = "ChannelPager";
            this.results = results;
            this.hasMore = hasMore;
        }
        hasMorePagers() { return this.hasMore; }
        nextPage() {
            this.hasMore = false;
            this.results = [];
            return this;
        }
    }
    // @ts-expect-error hack to inject constant
    globalThis.ChannelPager = ChannelPager;
    class CommentPager {
        plugin_type;
        results;
        hasMore;
        constructor(results, hasMore) {
            this.plugin_type = "CommentPager";
            this.results = results;
            this.hasMore = hasMore;
        }
        hasMorePagers() { return this.hasMore; }
        nextPage() {
            this.hasMore = false;
            this.results = [];
            return this;
        }
    }
    // @ts-expect-error hack to inject constant
    globalThis.CommentPager = CommentPager;
    class PlaylistPager {
        plugin_type = "PlaylistPager";
        results;
        hasMore;
        constructor(results, hasMore) {
            this.plugin_type = "PlaylistPager";
            this.results = results;
            this.hasMore = hasMore;
        }
        hasMorePagers() { return this.hasMore; }
        nextPage() {
            this.hasMore = false;
            this.results = [];
            return this;
        }
    }
    // @ts-expect-error hack to inject constant
    globalThis.PlaylistPager = PlaylistPager;
    class PlatformAuthorLink {
        id;
        name;
        url;
        thumbnail;
        subscribers;
        membershipUrl;
        constructor(id, name, url, thumbnail, subscribers, membershipUrl) {
            this.id = id;
            this.name = name;
            this.url = url;
            if (thumbnail !== undefined) {
                this.thumbnail = thumbnail;
            }
            if (subscribers !== undefined) {
                this.subscribers = subscribers;
            }
            if (membershipUrl !== undefined) {
                this.membershipUrl = membershipUrl;
            }
        }
    }
    // @ts-expect-error hack to inject constant
    globalThis.PlatformAuthorLink = PlatformAuthorLink;
    class PlatformID {
        platform;
        value;
        pluginId;
        claimType;
        claimFieldType;
        constructor(platform, id, pluginId, claimType, claimFieldType) {
            this.platform = platform;
            this.pluginId = pluginId;
            this.value = id;
            this.claimType = claimType ?? 0;
            this.claimFieldType = claimFieldType ?? -1;
        }
    }
    // @ts-expect-error hack to inject constant
    globalThis.PlatformID = PlatformID;
    class PlaybackTracker {
        nextRequest;
        constructor(interval) {
            this.nextRequest = interval ?? 10 * 1000;
        }
    }
    // @ts-expect-error hack to inject constant
    globalThis.PlaybackTracker = PlaybackTracker;
    class Thumbnail {
        url;
        quality;
        constructor(url, quality) {
            this.url = url;
            this.quality = quality;
            log(`new Thumbnail url: ${this.url} quality: ${this.quality}`);
        }
    }
    // @ts-expect-error hack to inject constant
    globalThis.Thumbnail = Thumbnail;
    class Thumbnails {
        sources;
        constructor(thumbnails) {
            this.sources = thumbnails;
        }
    }
    // @ts-expect-error hack to inject constant
    globalThis.Thumbnails = Thumbnails;
}
init();
